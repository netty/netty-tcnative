FROM centos:6.10

ENV SOURCE_DIR /root/source
ENV WORKSPACE_DIR /root/workspace
ENV PROJECT_DIR /root/workspace/project
ENV CMAKE_VERSION_BASE 3.8
ENV CMAKE_VERSION $CMAKE_VERSION_BASE.2
ENV NINJA_VERSION 1.7.2
ENV GO_VERSION 1.9.3

# Update as we need to use the vault now.
RUN sed -i -e 's/^mirrorlist/#mirrorlist/g' -e 's/^#baseurl=http:\/\/mirror.centos.org\/centos\/$releasever\//baseurl=http:\/\/vault.centos.org\/6.10\//g' /etc/yum.repos.d/CentOS-Base.repo

# We want to have git 2.x for the maven scm plugin
RUN yum install -y http://opensource.wandisco.com/centos/6/git/x86_64/wandisco-git-release-6-1.noarch.rpm

# install dependencies
RUN yum install -y \
 apr-devel \
 autoconf \
 automake \
 bzip2 \
 git \
 glibc-devel \
 gnupg \
 libapr1-dev \
 libtool \
 lsb-core \
 make \
 openssl-devel \
 perl \
 tar \
 unzip \
 wget

RUN mkdir $SOURCE_DIR
WORKDIR $SOURCE_DIR

RUN wget -q https://cmake.org/files/v$CMAKE_VERSION_BASE/cmake-$CMAKE_VERSION-Linux-x86_64.tar.gz && tar zxf cmake-$CMAKE_VERSION-Linux-x86_64.tar.gz && mv cmake-$CMAKE_VERSION-Linux-x86_64 /opt/ && echo 'PATH=/opt/cmake-$CMAKE_VERSION-Linux-x86_64/bin:$PATH' >> ~/.bashrc

RUN wget -q https://github.com/ninja-build/ninja/releases/download/v$NINJA_VERSION/ninja-linux.zip && unzip ninja-linux.zip && mkdir -p /opt/ninja-$NINJA_VERSION/bin && mv ninja /opt/ninja-$NINJA_VERSION/bin && echo 'PATH=/opt/ninja-$NINJA_VERSION/bin:$PATH' >> ~/.bashrc

RUN wget -q http://storage.googleapis.com/golang/go$GO_VERSION.linux-amd64.tar.gz && tar zxf go$GO_VERSION.linux-amd64.tar.gz && mv go /opt/ && echo 'PATH=/opt/go/bin:$PATH' >> ~/.bashrc && echo 'export GOROOT=/opt/go/' >> ~/.bashrc

RUN wget -q http://linuxsoft.cern.ch/cern/scl/RPM-GPG-KEY-cern && mv RPM-GPG-KEY-cern /etc/pki/rpm-gpg/
RUN wget -q http://linuxsoft.cern.ch/cern/scl/slc6-scl.repo && mv slc6-scl.repo /etc/yum.repos.d
RUN yum install -y devtoolset-3-gcc-c++
RUN echo 'source /opt/rh/devtoolset-3/enable' >> ~/.bashrc

# This is workaround to be able to compile boringssl with -DOPENSSL_C11_ATOMIC as while we use a recent gcc installation it still needs some
# help to define static_assert(...) as otherwise the compilation will fail due the system installed assert.h which missed this definition. 
run mkdir ~/.include
run echo '#include "/usr/include/assert.h"' >>  ~/.include/assert.h
run echo '#define static_assert _Static_assert'  >>  ~/.include/assert.h
run echo 'export C_INCLUDE_PATH="$HOME/.include/"' >>  ~/.bashrc

RUN rm -rf $SOURCE_DIR

ARG java_version=1.8
ENV JAVA_VERSION $java_version
# installing java with jabba
RUN curl -sL https://github.com/shyiko/jabba/raw/master/install.sh | JABBA_COMMAND="install $JAVA_VERSION -o /jdk" bash

RUN echo 'export JAVA_HOME="/jdk"' >> ~/.bashrc
RUN echo 'PATH=/jdk/bin:$PATH' >> ~/.bashrc

WORKDIR /opt
RUN curl https://downloads.apache.org/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz | tar -xz
RUN echo 'PATH=/opt/apache-maven-3.6.3/bin/:$PATH' >> ~/.bashrc

# Prepare our own build
ENV PATH /opt/apache-maven-3.6.3/bin/:$PATH
ENV JAVA_HOME /jdk/

RUN mkdir $WORKSPACE_DIR
RUN mkdir $PROJECT_DIR
WORKDIR $PROJECT_DIR

# Copy all the pom.xml files so we can download dependencies etc.
COPY ./boringssl-static/pom.xml $PROJECT_DIR/boringssl-static/pom.xml
COPY ./libressl-static/pom.xml $PROJECT_DIR/libressl-static/pom.xml
COPY ./openssl-dynamic/pom.xml $PROJECT_DIR/openssl-dynamic/pom.xml
COPY ./openssl-static/pom.xml $PROJECT_DIR/openssl-static/pom.xml
COPY ./pom.xml $PROJECT_DIR/pom.xml

# Download dependencies
RUN /bin/bash -c 'source $HOME/.bashrc && mvn dependency:go-offline checkstyle:check animal-sniffer:check surefire:test -ntp'

# Pre-build apr
RUN /bin/bash -c 'source $HOME/.bashrc && mvn antrun:run@source-apr-linux-mac antrun:run@build-apr-linux-mac -DaprSourceDir=$WORKSPACE_DIR/apr-source -DaprHome=$WORKSPACE_DIR/apr -DlinkStatic=true'

# Pre-build boringssl
RUN /bin/bash -c 'source $HOME/.bashrc && mvn -pl boringssl-static scm:checkout@get-boringssl antrun:run@build-boringssl -DboringsslSourceDir=$WORKSPACE_DIR/boringssl-source -DboringsslHome=$WORKSPACE_DIR/boringssl -DlinkStatic=true'

# Pre-build openssl
RUN /bin/bash -c 'source $HOME/.bashrc && mvn -pl openssl-static antrun:run@source-openssl antrun:run@build-openssl -DopensslSourceDir=$WORKSPACE_DIR/openssl-source -DopensslHome=$WORKSPACE_DIR/openssl -DlinkStatic=true'

# Pre-build libressl
RUN /bin/bash -c 'source $HOME/.bashrc && mvn -pl libressl-static antrun:run@source-libressl-non-windows antrun:run@build-libressl-non-windows -DlibresslSourceDir=$WORKSPACE_DIR/libressl-source -DlibresslHome=$WORKSPACE_DIR/libressl -DlinkStatic=true'
