ARG debian_version=12
FROM debian:$debian_version
# needed to do again after FROM due to docker limitation
ARG debian_version

ENV SOURCE_DIR /root/source
ENV CMAKE_VERSION 3.29.2
ENV NINJA_VERSION 1.12.0
ENV MAVEN_VERSION 3.9.6
ENV GO_VERSION 1.9.3
ENV GCC_VERSION 4.9.4

# install dependencies
RUN apt -y update && apt --force-yes -y install \
 autoconf \
 automake \
 bzip2 \
 cmake \
 curl \
 gcc \
 gcc-multilib \
 git \
 gnupg \
 golang-go \
 g++ \
 libapr1-dev \
 libssl-dev \
 libtool \
 libc-bin \
 libc6-dev \
 make \
 patch \
 tar \
 unzip \
 wget \
 xutils-dev \
 zip

RUN mkdir $SOURCE_DIR
WORKDIR $SOURCE_DIR

# Install CMake
RUN curl -L -O https://github.com/Kitware/CMake/releases/download/v$CMAKE_VERSION/cmake-$CMAKE_VERSION-linux-x86_64.tar.gz && \
 tar -zxvf cmake-$CMAKE_VERSION-linux-x86_64.tar.gz && \
 mv cmake-$CMAKE_VERSION-linux-x86_64 /opt/ && \
 echo 'PATH=/opt/cmake-$CMAKE_VERSION-linux-x86_64/bin:$PATH' >> ~/.bashrc

# Install Ninja
RUN curl -L -O https://github.com/ninja-build/ninja/releases/download/v$NINJA_VERSION/ninja-linux.zip && \
 unzip ninja-linux.zip && \
 mkdir -p /opt/ninja-$NINJA_VERSION/bin && \
 mv ninja /opt/ninja-$NINJA_VERSION/bin && \
 echo 'PATH=/opt/ninja-$NINJA_VERSION/bin:$PATH' >> ~/.bashrc

RUN rm -rf $SOURCE_DIR

# Downloading and installing SDKMAN!
RUN curl -s "https://get.sdkman.io" | bash

ARG java_version="8.0.412-zulu"
ENV JAVA_VERSION $java_version

# Installing Java removing some unnecessary SDKMAN files
RUN bash -c "source $HOME/.sdkman/bin/sdkman-init.sh && \
    yes | sdk install java $JAVA_VERSION && \
    yes | sdk install maven $MAVEN_VERSION && \
    rm -rf $HOME/.sdkman/archives/* && \
    rm -rf $HOME/.sdkman/tmp/*"

RUN echo 'export JAVA_HOME="/root/.sdkman/candidates/java/current"' >> ~/.bashrc
RUN echo 'PATH=$JAVA_HOME/bin:$PATH' >> ~/.bashrc

# Prepare our own build
ENV PATH /root/.sdkman/candidates/maven/current:$PATH
ENV JAVA_HOME /jdk/

## Cleanup
RUN apt clean
